import streamlit as st
import sqlite3
import requests
import pandas as pd
import posting
from datetime import datetime




# 그룹 생성
class GroupAndLocationApp:


    def show_group_details(self, group_id, group_name):
        """선택한 그룹의 세부 정보 및 채팅 기능 표시"""
        st.subheader(f"그룹: {group_name}")

        # 컨테이너로 세부 정보와 채팅 표시
        with st.container():
            self.display_chat_interface(group_name, group_id)

    def save_message(self, room_name, username, message):
        """메시지 저장"""
        conn = self.create_connection()
        try:
            cursor = conn.cursor()
            timestamp = datetime.now()
            cursor.execute(
                "INSERT INTO messages (room_name, username, message, timestamp) VALUES (?, ?, ?, ?)",
                (room_name, username, message, timestamp)
            )
            conn.commit()
        except sqlite3.Error as e:
            st.error(f"메시지 저장 오류: {e}")
        finally:
            conn.close()

    def display_chat_interface(self, group_name, group_id):
        st.subheader(f"채팅: {group_name}")

        # 로그인 상태 확인
        sender_id = st.session_state.get("user_id")
        if not sender_id:
            st.error("로그인이 필요합니다.")
            return

        # 메시지 기록 상태 초기화
        if f"messages_{group_id}" not in st.session_state:
            st.session_state[f"messages_{group_id}"] = self.load_messages(group_id)

        # 메시지 기록 출력
        st.markdown("### 채팅 기록")
        for sender_id, message_text, sent_at in st.session_state[f"messages_{group_id}"]:
            st.write(f"**{sender_id}** ({sent_at}): {message_text}")

        # 메시지 입력 필드 상태 유지
        if f"new_message_{group_id}" not in st.session_state:
            st.session_state[f"new_message_{group_id}"] = ""

        # 메시지 입력 필드
        new_message = st.text_input(
            "메시지 입력",
            value=st.session_state[f"new_message_{group_id}"],
            key=f"chat_input_{group_id}"
        )
        st.session_state[f"new_message_{group_id}"] = new_message  # 상태 유지

        # 메시지 전송
        if st.button("보내기", key=f"send_button_{group_id}"):
            if new_message.strip():
                self.save_message(group_id, sender_id, new_message)
                st.session_state[f"new_message_{group_id}"] = ""  # 입력 필드 초기화
                st.session_state[f"messages_{group_id}"] = self.load_messages(group_id)  # 메시지 기록 갱신
            else:
                st.warning("메시지를 입력해주세요.")

    def save_message(self, group_id, sender_id, message):
        """메시지 저장"""
        conn = self.create_connection()
        try:
            cursor = conn.cursor()
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute(
                "INSERT INTO messages (group_id, sender_id, message_text, sent_at) VALUES (?, ?, ?, ?)",
                (group_id, sender_id, message, timestamp)
            )
            conn.commit()
        except sqlite3.Error as e:
            st.error(f"메시지 저장 오류: {e}")
        finally:
            conn.close()

    def load_messages(self, group_id):
        """메시지 불러오기"""
        conn = self.create_connection()
        try:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT sender_id, message_text, sent_at FROM messages WHERE group_id = ? ORDER BY sent_at ASC",
                (group_id,)
            )
            return cursor.fetchall()
        except sqlite3.Error as e:
            st.error(f"메시지 불러오기 오류: {e}")
            return []
        finally:
            conn.close()

    def display_chat_interface(self, group_name, group_id):
        """채팅 UI"""
        st.subheader(f"채팅: {group_name}")

        # 로그인 상태 확인
        sender_id = st.session_state.get("user_id")
        if not sender_id:
            st.error("로그인이 필요합니다.")
            return

        # 메시지 기록 상태 초기화
        if f"messages_{group_id}" not in st.session_state:
            st.session_state[f"messages_{group_id}"] = self.load_messages(group_id)

        # 메시지 기록 출력
        st.markdown("### 채팅 기록")
        for sender_id, message_text, sent_at in st.session_state[f"messages_{group_id}"]:
            st.write(f"**{sender_id}** ({sent_at}): {message_text}")

        # 메시지 입력 필드 상태 유지
        if f"new_message_{group_id}" not in st.session_state:
            st.session_state[f"new_message_{group_id}"] = ""

        # 메시지 입력 필드
        new_message = st.text_input(
            "메시지 입력",
            value=st.session_state[f"new_message_{group_id}"],
            key=f"chat_input_{group_id}"
        )
        st.session_state[f"new_message_{group_id}"] = new_message  # 상태 유지

        # 메시지 전송
        if st.button("보내기", key=f"send_button_{group_id}"):
            if new_message.strip():
                self.save_message(group_id, sender_id, new_message)
                st.session_state[f"new_message_{group_id}"] = ""  # 입력 필드 초기화
                st.session_state[f"messages_{group_id}"] = self.load_messages(group_id)  # 메시지 기록 갱신
            else:
                st.warning("메시지를 입력해주세요.")

    def search_location(self, query):
        url = "https://dapi.kakao.com/v2/local/search/keyword.json"
        headers = {
            "Authorization": f"KakaoAK {self.kakao_api_key}"
        }
        params = {
            "query": query,
            "category_group_code": "SW8,FD6,CE7,AT4"  # 음식점, 카페, 관광 명소
        }

        try:
            response = requests.get(url, headers=headers, params=params)
            if response.status_code == 200:
                return response.json().get("documents", [])
            elif response.status_code == 401:
                st.error("API 인증 실패: REST API 키를 확인하세요.")
            else:
                st.error(f"API 요청 오류: {response.status_code} - {response.text}")
        except requests.exceptions.RequestException as e:
            st.error(f"요청 실패: {e}")
        return None

    # 그룹 탈퇴 및 양도

    def remove_group_member_page(self):
        st.header("그룹원 내보내기")
        user_id = st.session_state.get("user_id")
        if not user_id:
            st.error("로그인이 필요합니다.")
            return

            # 뒤로 가기 버튼 추가
        if st.button("뒤로 가기", key="back_button"):
            go_back()

        conn = self.create_connection()
        try:
            cursor = conn.cursor()
            cursor.execute(
                """
                SELECT group_id, group_name FROM "group"
                WHERE group_creator = ?
            """,
                (user_id,),
            )
            groups = cursor.fetchall()
        except sqlite3.Error as e:
            st.error(f"DB 오류: {e}")
            return
        finally:
            conn.close()

        if not groups:
            st.warning("관리 가능한 그룹이 없습니다.")
            return

        selected_group = st.selectbox("그룹을 선택하세요:", groups, format_func=lambda x: x[1])

        conn = self.create_connection()
        try:
            cursor = conn.cursor()
            cursor.execute(
                """
                SELECT user_id FROM group_member
                WHERE group_id = ? AND role = 'member'
            """,
                (selected_group[0],),
            )
            members = [row[0] for row in cursor.fetchall()]
        except sqlite3.Error as e:
            st.error(f"DB 오류: {e}")
            return
        finally:
            conn.close()

        if not members:
            st.warning("해당 그룹에 내보낼 그룹원이 없습니다.")
            return

        selected_member = st.selectbox("내보낼 그룹원을 선택하세요:", members)

        if st.button("그룹원 내보내기"):
            conn = self.create_connection()
            try:
                cursor = conn.cursor()
                cursor.execute(
                    """
                    DELETE FROM group_member
                    WHERE group_id = ? AND user_id = ?
                """,
                    (selected_group[0], selected_member),
                )
                if cursor.rowcount > 0:
                    conn.commit()
                    st.success(f"'{selected_member}'님을 그룹에서 내보냈습니다.")
                else:
                    st.error("그룹원 내보내기에 실패하였습니다.")
            except sqlite3.Error as e:
                st.error(f"DB 오류: {e}")
            finally:
                conn.close()

    # 초대 기능


class GroupBlockDAO:
    """
    그룹 차단과 관련된 DAO 클래스
    """
    def __init__(self, db_path='zip.db'):
        self.db_path = db_path

    def create_connection(self):
        try:
            conn = sqlite3.connect(self.db_path)
            return conn
        except sqlite3.Error as e:
            print(f"데이터베이스 연결 오류: {e}")
            return None

    def block_group(self, user_id, group_id):
        query = """
            INSERT INTO group_block (user_id, blocked_group_id)
            VALUES (?, ?)
        """
        try:
            conn = self.create_connection()
            if conn:
                cursor = conn.cursor()
                cursor.execute(query, (user_id, group_id))
                conn.commit()
                conn.close()
                return True
        except sqlite3.Error as e:
            print(f"그룹 차단 오류: {e}")
        return False

    def unblock_group(self, user_id, group_id):
        query = """
            DELETE FROM group_block
            WHERE user_id = ? AND blocked_group_id = ?
        """
        try:
            conn = self.create_connection()
            if conn:
                cursor = conn.cursor()
                cursor.execute(query, (user_id, group_id))
                conn.commit()
                conn.close()
                return True
        except sqlite3.Error as e:
            print(f"그룹 차단 해제 오류: {e}")
        return False

    def get_blocked_groups(self, user_id):
        query = """
            SELECT blocked_group_id
            FROM group_block
            WHERE user_id = ?
        """
        try:
            conn = self.create_connection()
            if conn:
                cursor = conn.cursor()
                cursor.execute(query, (user_id,))
                blocked_groups = cursor.fetchall()
                conn.close()
                return [group[0] for group in blocked_groups]
        except sqlite3.Error as e:
            print(f"차단된 그룹 조회 오류: {e}")
        return []

    def is_group_blocked(self, user_id, group_id):
        query = """
            SELECT 1
            FROM group_block
            WHERE user_id = ? AND blocked_group_id = ?
        """
        try:
            conn = self.create_connection()
            if conn:
                cursor = conn.cursor()
                cursor.execute(query, (user_id, group_id))
                result = cursor.fetchone()
                conn.close()
                return result is not None
        except sqlite3.Error as e:
            print(f"그룹 차단 확인 오류: {e}")

class GroupManager:


    def cancel_group_request(self, user_id, group_id):
        """그룹 요청 취소"""
        conn = self.create_connection()
        try:
            cursor = conn.cursor()
            cursor.execute("""
                DELETE FROM myGroupRequest WHERE user_id = ? AND requested_group_id = ?
            """, (user_id, group_id))
            conn.commit()
            st.success("그룹 요청이 취소되었습니다.")
        except sqlite3.Error as e:
            st.error(f"DB 오류가 발생했습니다: {e}")
        finally:
            conn.close()


# 그룹 대기 목록 페이지
def group_request_page():
    """
    그룹 대기 목록 페이지를 렌더링하는 함수.
    - 다른 사람이 보낸 그룹 참여 요청
    - 내가 보낸 그룹 참여 요청
    """
    st.title("그룹 대기 목록")

    # 현재 사용자 ID 가져오기
    user_id = st.session_state.get("user_id")
    if not user_id:
        st.error("로그인이 필요합니다.")
        return

    conn = create_connection()
    if not conn:
        st.error("데이터베이스 연결 실패")
        return

    try:
        cursor = conn.cursor()

        # 다른 사람이 보낸 초대 요청 조회
        st.subheader("다른 사람이 보낸 그룹 초대 요청")
        cursor.execute("""
            SELECT r.group_id, g.group_name, r.requester_user_id
            FROM otherGroupRequest r
            JOIN "group" g ON r.group_id = g.group_id
            WHERE r.requester_user_id = ?
        """, (user_id,))
        incoming_invites = cursor.fetchall()

        if not incoming_invites:
            st.info("현재 다른 사람이 보낸 그룹 초대 요청이 없습니다.")
        else:
            for group_id, group_name, requester_id in incoming_invites:
                st.markdown(f"**그룹 이름:** {group_name}, **요청자 ID:** {requester_id}")

                col1, col2 = st.columns([1, 1])
                with col1:
                    if st.button(f"수락 (ID: {requester_id})", key=f"accept_{group_id}_{requester_id}"):
                        cursor.execute("""
                            INSERT INTO group_member (group_id, user_id, role)
                            VALUES (?, ?, 'member')
                        """, (group_id, user_id))
                        cursor.execute("""
                            DELETE FROM otherGroupRequest
                            WHERE group_id = ? AND requester_user_id = ?
                        """, (group_id, requester_id))
                        conn.commit()
                        st.success(f"'{group_name}' 그룹 초대를 수락했습니다.")
                with col2:
                    if st.button(f"거절 (ID: {requester_id})", key=f"reject_{group_id}_{requester_id}"):
                        cursor.execute("""
                            DELETE FROM otherGroupRequest
                            WHERE group_id = ? AND requester_user_id = ?
                        """, (group_id, requester_id))
                        conn.commit()
                        st.warning(f"'{group_name}' 그룹 초대를 거절했습니다.")

        st.markdown("---")

        # 내가 보낸 참여 요청 조회
        st.subheader("내가 보낸 그룹 참여 요청")
        cursor.execute("""
            SELECT r.requested_group_id, g.group_name
            FROM myGroupRequest r
            JOIN "group" g ON r.requested_group_id = g.group_id
            WHERE r.user_id = ?
        """, (user_id,))
        sent_requests = cursor.fetchall()

        if not sent_requests:
            st.info("현재 내가 보낸 그룹 참여 요청이 없습니다.")
        else:
            for group_id, group_name in sent_requests:
                st.markdown(f"**그룹 이름:** {group_name}")

                if st.button(f"요청 취소 (그룹: {group_name})", key=f"cancel_request_{group_id}"):
                    cursor.execute("""
                        DELETE FROM myGroupRequest
                        WHERE user_id = ? AND requested_group_id = ?
                    """, (user_id, group_id))
                    conn.commit()
                    st.warning(f"'{group_name}' 그룹 참여 요청을 취소했습니다.")

    except sqlite3.Error as e:
        st.error(f"데이터베이스 오류: {e}")
    finally:
        conn.close()


def group_request_page():
    """
    그룹 대기 목록 페이지를 렌더링하는 함수.
    - 다른 사람이 보낸 그룹 참여 요청
    - 내가 보낸 그룹 참여 요청
    """
    import streamlit as st
    import sqlite3

    st.title("그룹 대기 목록")

    # 현재 사용자 ID 가져오기
    user_id = st.session_state.get("user_id")
    if not user_id:
        st.error("로그인이 필요합니다.")
        return

    conn = sqlite3.connect("zip.db")
    try:
        cursor = conn.cursor()

        ### 다른 사람이 보낸 요청 (내가 관리하는 그룹 기준)
        st.subheader("다른 사람이 보낸 그룹 참여 요청")
        cursor.execute("""
            SELECT gm.group_id, g.group_name, gm.user_id, u.user_name
            FROM group_member gm
            JOIN "group" g ON gm.group_id = g.group_id
            JOIN user u ON gm.user_id = u.user_id
            WHERE g.group_creator = ? AND gm.role = 'pending'
        """, (user_id,))
        incoming_requests = cursor.fetchall()

        if not incoming_requests:
            st.info("현재 다른 사람이 보낸 그룹 참여 요청이 없습니다.")
        else:
            for group_id, group_name, request_user_id, request_user_name in incoming_requests:
                st.markdown(f"**그룹 이름:** {group_name}, **사용자 ID:** {request_user_id}, **이름:** {request_user_name}")

                col1, col2 = st.columns([1, 1])
                with col1:
                    if st.button(f"승인 (ID: {request_user_id})", key=f"approve_{group_id}_{request_user_id}"):
                        cursor.execute("""
                            UPDATE group_member
                            SET role = 'member'
                            WHERE group_id = ? AND user_id = ?
                        """, (group_id, request_user_id))
                        conn.commit()
                        st.success(f"{request_user_name}님이 '{group_name}' 그룹에 추가되었습니다.")
                with col2:
                    if st.button(f"거절 (ID: {request_user_id})", key=f"reject_{group_id}_{request_user_id}"):
                        cursor.execute("""
                            DELETE FROM group_member
                            WHERE group_id = ? AND user_id = ?
                        """, (group_id, request_user_id))
                        conn.commit()
                        st.warning(f"{request_user_name}님의 요청이 거절되었습니다.")

        st.markdown("---")  # 구분선

        ### 내가 보낸 요청
        st.subheader("내가 보낸 그룹 참여 요청")
        cursor.execute("""
            SELECT gm.group_id, g.group_name, g.group_creator, u.user_name
            FROM group_member gm
            JOIN "group" g ON gm.group_id = g.group_id
            JOIN user u ON g.group_creator = u.user_id
            WHERE gm.user_id = ? AND gm.role = 'pending'
        """, (user_id,))
        outgoing_requests = cursor.fetchall()

        if not outgoing_requests:
            st.info("현재 내가 보낸 그룹 참여 요청이 없습니다.")
        else:
            for group_id, group_name, group_creator, creator_name in outgoing_requests:
                st.markdown(f"**그룹 이름:** {group_name}, **그룹장 ID:** {group_creator}, **그룹장 이름:** {creator_name}")

                if st.button(f"요청 취소 (그룹: {group_name})", key=f"cancel_request_{group_id}"):
                    cursor.execute("""
                        DELETE FROM group_member
                        WHERE group_id = ? AND user_id = ?
                    """, (group_id, user_id))
                    conn.commit()
                    st.warning(f"'{group_name}' 그룹으로의 요청이 취소되었습니다.")

    except sqlite3.Error as e:
        st.error(f"데이터베이스 오류가 발생했습니다: {e}")
    finally:
        conn.close()


import sqlite3

def invite_user_to_group(group_id, invitee_id):
    """
    그룹에 사용자를 초대하고 바로 group_member 테이블에 추가
    """
    conn = sqlite3.connect('zip.db')
    try:
        cursor = conn.cursor()

        # 초대 대상 확인
        cursor.execute("SELECT user_id FROM user WHERE user_id = ?", (invitee_id,))
        user_exists = cursor.fetchone()
        if not user_exists:
            return {"success": False, "message": "존재하지 않는 사용자입니다."}

        # 초대 대상이 이미 그룹 멤버인지 확인
        cursor.execute(
            "SELECT group_member_id FROM group_member WHERE group_id = ? AND user_id = ?",
            (group_id, invitee_id),
        )
        already_member = cursor.fetchone()
        if already_member:
            return {"success": False, "message": "이미 그룹에 포함된 사용자입니다."}

        # 초대 대상 추가
        cursor.execute(
            """
            INSERT INTO group_member (group_id, user_id, role, joined_at)
            VALUES (?, ?, 'member', CURRENT_TIMESTAMP)
            """,
            (group_id, invitee_id),
        )
        conn.commit()

        return {"success": True, "message": f"{invitee_id} 사용자가 그룹에 성공적으로 추가되었습니다."}
    except sqlite3.Error as e:
        return {"success": False, "message": f"DB 오류: {e}"}
    finally:
        conn.close()

def join_group(group_id, user_id):
    """
    사용자가 그룹에 참여하는 함수
    """
    conn = sqlite3.connect('zip.db')
    try:
        cursor = conn.cursor()

        # 그룹 존재 확인
        cursor.execute("SELECT group_id FROM \"group\" WHERE group_id = ?", (group_id,))
        group_exists = cursor.fetchone()
        if not group_exists:
            return {"success": False, "message": "존재하지 않는 그룹입니다. (ID)"}

        # 사용자가 이미 그룹에 속해 있는지 확인
        cursor.execute(
            "SELECT group_member_id FROM group_member WHERE group_id = ? AND user_id = ?",
            (group_id, user_id),
        )
        already_member = cursor.fetchone()
        if already_member:
            return {"success": False, "message": "이미 그룹에 포함된 사용자입니다."}

        # 그룹 참여
        cursor.execute(
            """
            INSERT INTO group_member (group_id, user_id, role, joined_at)
            VALUES (?, ?, 'member', CURRENT_TIMESTAMP)
            """,
            (group_id, user_id),
        )
        conn.commit()

        return {"success": True, "message": f"그룹 참여가 완료되었습니다."}
    except sqlite3.Error as e:
        return {"success": False, "message": f"DB 오류: {e}"}
    finally:
        conn.close()





def group_request_page():
    """
    그룹 대기 목록 페이지를 렌더링하는 함수.
    - 다른 사람이 보낸 그룹 참여 요청
    - 내가 보낸 그룹 참여 요청
    """
    import streamlit as st
    import sqlite3

    st.title("그룹 대기 목록")

    # 현재 사용자 ID 가져오기
    user_id = st.session_state.get("user_id")
    if not user_id:
        st.error("로그인이 필요합니다.")
        return

    conn = sqlite3.connect("zip.db")
    try:
        cursor = conn.cursor()

        ### 다른 사람이 보낸 요청 (내가 관리하는 그룹 기준)
        st.subheader("다른 사람이 보낸 그룹 참여 요청")
        cursor.execute("""
            SELECT gm.group_id, g.group_name, gm.user_id
            FROM group_member gm
            JOIN "group" g ON gm.group_id = g.group_id
            WHERE g.group_creator = ? AND gm.role = 'pending'
        """, (user_id,))
        incoming_requests = cursor.fetchall()

        if not incoming_requests:
            st.info("현재 다른 사람이 보낸 그룹 참여 요청이 없습니다.")
        else:
            for group_id, group_name, request_user_id in incoming_requests:
                st.markdown(f"**그룹 이름:** {group_name}, **요청자 ID:** {request_user_id}")

                col1, col2 = st.columns([1, 1])
                with col1:
                    if st.button(f"승인 (ID: {request_user_id})", key=f"approve_{group_id}_{request_user_id}"):
                        cursor.execute("""
                            UPDATE group_member
                            SET role = 'member'
                            WHERE group_id = ? AND user_id = ?
                        """, (group_id, request_user_id))
                        conn.commit()
                        st.success(f"{request_user_id}님이 '{group_name}' 그룹에 추가되었습니다.")
                with col2:
                    if st.button(f"거절 (ID: {request_user_id})", key=f"reject_{group_id}_{request_user_id}"):
                        cursor.execute("""
                            DELETE FROM group_member
                            WHERE group_id = ? AND user_id = ?
                        """, (group_id, request_user_id))
                        conn.commit()
                        st.warning(f"{request_user_id}님의 요청이 거절되었습니다.")

        st.markdown("---")  # 구분선

        ### 내가 보낸 요청
        st.subheader("내가 보낸 그룹 참여 요청")
        cursor.execute("""
            SELECT gm.group_id, g.group_name, g.group_creator
            FROM group_member gm
            JOIN "group" g ON gm.group_id = g.group_id
            WHERE gm.user_id = ? AND gm.role = 'pending'
        """, (user_id,))
        outgoing_requests = cursor.fetchall()

        if not outgoing_requests:
            st.info("현재 내가 보낸 그룹 참여 요청이 없습니다.")
        else:
            for group_id, group_name, group_creator in outgoing_requests:
                st.markdown(f"**그룹 이름:** {group_name}, **그룹장 ID:** {group_creator}")

                if st.button(f"요청 취소 (그룹: {group_name})", key=f"cancel_request_{group_id}"):
                    cursor.execute("""
                        DELETE FROM group_member
                        WHERE group_id = ? AND user_id = ?
                    """, (group_id, user_id))
                    conn.commit()
                    st.warning(f"'{group_name}' 그룹으로의 요청이 취소되었습니다.")

        st.markdown("---")

        # 뒤로가기 버튼 추가
        if st.button("뒤로가기"):
            go_back()  # 이전 페이지로 이동

    except sqlite3.Error as e:
        st.error(f"데이터베이스 오류가 발생했습니다: {e}")
    finally:
        conn.close()





def main():
    # Sidebar 메뉴
    st.sidebar.title("그룹 관리 메뉴")
    page = st.sidebar.radio(
        "페이지를 선택하세요:",
        [
            "내가 속한 그룹",
            "그룹 생성",
            "그룹 수정",
            "그룹 삭제",
            "그룹 탈퇴 및 양도",
            "그룹원 내보내기",
            "그룹 초대",
            "검색",
        ],
    )

    # GroupAndLocationApp 초기화
    kakao_api_key = "393132b4dfde1b54fc18b3bacc06eb3f"  # 실제 API 키로 대체
    app = GroupAndLocationApp(db_name="zip.db", kakao_api_key="6c1cbbc51f7ba2ed462ab5b62d3a3746")

    # 페이지별 메서드 호출
    if page == "내가 속한 그룹":
        app.my_groups_page()
    elif page == "그룹 생성":
        app.group_creation_page()
    elif page == "그룹 수정":
        app.group_update_page()
    elif page == "그룹 삭제":
        app.group_delete_page()
    elif page == "그룹 탈퇴 및 양도":
        app.manage_group_members_page()
    elif page == "그룹원 내보내기":
        app.remove_group_member_page()
    elif page == "그룹 초대":
        app.group_invitation_page()
   


if __name__ == "__main__":
    main()

