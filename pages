import pandas as pd
import streamlit as st
import sqlite3
import bcrypt
import database
import login
import posting
import friend
import setting
import group
from group import GroupBlockDAO, CategoryDAO, GroupManager, group_request_page, join_group, invite_user_to_group
from localization import Localization


# 초기화
if 'localization' not in st.session_state:
    st.session_state.localization = Localization(lang ='ko')  # 기본 언어는 한국어로 설정됨
# 현재 언어 설정 초기화
if 'current_language' not in st.session_state:
    st.session_state.current_language = 'ko'  # 기본값으로 한국어 설정




# 사이드바 ui----------------------------------------------------------------------------------------------------------
@st.dialog("친구 추가 창")
def add_friend():
    # user_id를 세션에서 가져오기
    user_id = st.session_state.get('user_id')

    # 상호작용할 ID 입력창
    target_id = st.text_input("친구 요청을 보낼 ID를 입력하세요:", key="friend_action_input")
    
    if st.button("친구 요청"):
        if target_id:
            # 친구 추가 함수 호출 (user_id와 target_id)
            friend.add_friend(user_id, target_id)
        else:
            st.warning("친구 요청할 ID를 입력해주세요.")

@st.dialog("친구 차단 창")
def block_friend():
    # user_id를 세션에서 가져오기
    user_id = st.session_state.get('user_id')

    # 상호작용할 ID 입력창
    target_id = st.text_input("차단할 친구의 ID를 입력하세요:", key="friend_action_input")
    
    if st.button("친구 차단"):
        if target_id:
            # 친구 차단 함수 호출 (user_id와 target_id)
            friend.block_friend(user_id, target_id)
        else:
            st.warning("친구 차단할 ID를 입력해주세요.")

@st.dialog("친구 차단 해제 창")
def unblock_friend():
    # user_id를 세션에서 가져오기
    user_id = st.session_state.get('user_id')

    # 상호작용할 ID 입력창
    target_id = st.text_input("차단 해제할 친구의 ID를 입력하세요:", key="friend_action_input")
    
    if st.button("친구 차단 해제"):
        if target_id:
            # 친구 차단 해제 함수 호출 (user_id와 target_id)
            friend.unblock_friend(user_id, target_id)
        else:
            st.warning("친구 차단 해제할 ID를 입력해주세요.")

    st.title("차단 목록")
    friend.show_blocked_list_page(user_id)

@st.dialog("친구 삭제 창")
def delete_friend():
    # user_id를 세션에서 가져오기
    user_id = st.session_state.get('user_id')

    # 상호작용할 ID 입력창
    target_id = st.text_input("삭제할 친구의 ID를 입력하세요:", key="friend_action_input")
    
    if st.button("친구 삭제"):
        if target_id:
            # 친구 차단 해제 함수 호출 (user_id와 target_id)
            friend.delete_friend(user_id, target_id)
        else:
            st.warning("삭제할 친구의 ID를 입력해주세요.")

@st.dialog("친구 대기 창")
def Request_friend():
    # user_id를 세션에서 가져오기
    user_id = st.session_state.get('user_id')
    friend.show_friend_requests_page(user_id)

# 친구 리스트 페이지
def FriendList_page(): 
    st.title("내 친구 리스트")  # 제목을 왼쪽에 배치
    col1, col2, col3, col4, col5, col6 = st.columns([2, 2, 2, 2, 2, 2])  # 비율 4 : 2 : 2
    with col1:
        if st.button("뒤로 가기"):
            go_back()
    with col2:
        if st.button("친구 요청 보내기", key="add_friend_button"):
            add_friend()
    with col3:
        if st.button("친구 차단", key="block_friend_button"):
            block_friend()
    with col4:
        if st.button("친구 차단 해제", key="unblock_friend_button"):
            unblock_friend()
    with col5:
        if st.button("친구 삭제", key="delete_friend_button"):
            delete_friend()
    with col6:
        if st.button("친구 대기", key = "requests_friend_button"):
            Request_friend()

    # 로그인된 user_id 가져오기
    user_id = st.session_state.get('user_id')
    
    if user_id:
        # 친구 목록 표시 함수 (실제 데이터와 연결)
        friend.show_friend_list(user_id)
    else:
        st.error("로그인 정보가 없습니다.")
        
def sidebar(user_id):
    #사이드바에는 친구만 존재
    st.sidebar.title("친구 관리")
    # user_id가 세션 상태에 저장되어 있으면 이를 사용
    user_id = st.session_state.get('user_id')

    # 친구 리스트
    if st.sidebar.button("내 친구 리스트"):
        change_page("Friend List Page")







            if not groups:
                st.warning("검색 결과가 없습니다.")
            else:
                for group in groups:
                    group_id, group_name, group_creator, meeting_date, meeting_time, category, location_name, current_members = group

                    st.markdown(f"**그룹 이름:** {group_name}")
                    st.markdown(f"**그룹장:** {group_creator}")
                    st.markdown(f"**현재 인원수:** {current_members}")
                    st.markdown(f"**카테고리:** {category}")
                    st.markdown(f"**장소:** {location_name}")

                    if f"joined_group_{group_id}" not in st.session_state:
                        st.session_state[f"joined_group_{group_id}"] = False

                    if st.session_state[f"joined_group_{group_id}"]:
                        st.info(f"이미 '{group_name}'에 참여하였습니다.")
                    else:
                        # 그룹 참여 버튼
                        if st.button(f"그룹 참여 ({group_name})", key=f"join_{group_id}"):
                            # 그룹 참여 처리
                            response = join_group(group_id, st.session_state["user_id"])
                            if response["success"]:
                                st.success(response["message"])
                                st.session_state[f"joined_group_{group_id}"] = True
                            else:
                                st.error(response["message"])

                    st.markdown("---")  # 구분선

        except sqlite3.Error as e:
            st.error(f"DB 오류 발생: {e}")
        finally:
            conn.close()

    # 검색 결과를 유지
    if "search_results" in st.session_state:
        groups = st.session_state["search_results"]

        if not groups:
            st.warning("검색 결과가 없습니다.")
        else:
            for group_id, group_name, group_creator, meeting_date, meeting_time, category, location_name, current_members in groups:
                st.markdown(f"**그룹 이름:** {group_name}")
                st.markdown(f"**그룹장:** {group_creator}")
                st.markdown(f"**현재 인원수:** {current_members}")
                st.markdown(f"**카테고리:** {category}")
                st.markdown(f"**장소:** {location_name}")

                if f"joined_group_{group_id}" not in st.session_state:
                    st.session_state[f"joined_group_{group_id}"] = False

                if st.session_state[f"joined_group_{group_id}"]:
                    st.info(f"이미 '{group_name}'에 참여하였습니다.")
                else:
                    # 그룹 참여 버튼
                    if st.button(f"그룹 참여 ({group_name})", key=f"join_{group_id}"):
                        # 그룹 참여 처리
                        response = join_group(group_id, st.session_state["user_id"])
                        if response["success"]:
                            st.success(response["message"])
                            st.session_state[f"joined_group_{group_id}"] = True
                        else:
                            st.error(response["message"])

                st.markdown("---")  # 구분선


@st.dialog("그룹 삭제")
def group_delete_page():
    # 그룹 ID 가져오기 (세션에 저장된 그룹 ID)
    group_id = st.session_state.get("group_id_to_delete")
    if not group_id:
        st.error("삭제할 그룹 ID를 찾을 수 없습니다.")
        return

    # DB 연결하여 그룹명 가져오기
    conn = sqlite3.connect('zip.db')
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT group_name FROM \"group\" WHERE group_id = ?", (group_id,))
        group_name = cursor.fetchone()
        if not group_name:
            st.error("그룹을 찾을 수 없습니다.")
            return
        group_name = group_name[0]  # 첫 번째 컬럼인 group_name 가져오기
    except sqlite3.Error as e:
        st.error(localization.get_text("db_error").format(e))
        return
    finally:
        conn.close()

    # 선택된 그룹 이름을 가져와서 확인 메시지 표시
    st.markdown(f"**정말 '{group_name}' 그룹을 삭제하시겠습니까?**")

    # 예 버튼
    if st.button("예", key=f"delete_yes_{group_id}"):
        user_id = st.session_state.get("user_id")
        if not user_id:
            st.error("로그인 정보가 없습니다.")
            return

        # DB 연결하여 그룹 삭제
        try:
            conn = sqlite3.connect('zip.db')
            cursor = conn.cursor()
            cursor.execute(
                "DELETE FROM \"group\" WHERE group_id = ? AND group_creator = ?",
                (group_id, user_id),
            )
            if cursor.rowcount == 0:
                st.error("그룹장만 그룹을 삭제할 수 있습니다.")
            else:
                conn.commit()
                st.success(f"'{group_name}' 그룹이 삭제되었습니다!")
        except sqlite3.Error as e:
            st.error(localization.get_text("db_error").format(e))
        finally:
            conn.close()

        if st.button("뒤로가기"):
            go_back()

    # 아니오 버튼
    if st.button("아니오", key=f"delete_no_{group_id}"):
        st.info("그룹 삭제가 취소되었습니다.")
        del st.session_state["group_id_to_delete"]  # 세션에서 그룹 ID 삭제

@st.dialog("그룹 수정")
def group_update_page():


    # 그룹 수정 폼 바로 표시
    st.markdown(f"**'{group_name}' 그룹을 수정합니다.**")

    user_id = st.session_state.get("user_id")
    if not user_id:
        st.error("로그인 정보가 없습니다.")
        return

    try:
        conn = sqlite3.connect('zip.db')
        cursor = conn.cursor()
        cursor.execute(
            """
            SELECT group_name, category, status, meeting_date, meeting_time
            FROM "group"
            WHERE group_id = ? 
            """,
            (group_id,),
        )
        group_data = cursor.fetchone()
        if not group_data:
            st.error("그룹 정보를 불러올 수 없습니다.")
            return

        group_name = st.text_input("그룹 이름", value=group_data[0])
        dao = group.CategoryDAO()
        categories = dao.get_all_categories()
        selected_category = st.selectbox(
            "카테고리 선택",
            options=categories,
            index=[cat[0] for cat in categories].index(group_data[1]),
            format_func=lambda x: x[1],
        )

        # 약속 날짜와 시간 추가
        if group_data[3] is not None:
            meeting_date = st.date_input("약속 날짜", value=group.datetime.strptime(group_data[3], "%Y-%m-%d").date())
        else:
            meeting_date = st.date_input("약속 날짜", value=group.datetime.today().date())  # 기본값: 오늘 날짜

        if group_data[4] is not None:
            meeting_time = st.time_input("약속 시간", value=group.datetime.strptime(group_data[4], "%H:%M:%S").time())
        else:
            meeting_time = st.time_input("약속 시간", value=group.datetime.now().time())  # 기본값: 현재 시간

        status_choices = ["진행 중", "완료", "취소"]
        selected_status = st.selectbox("그룹 상태", options=status_choices, index=status_choices.index(group_data[2]))

        # 그룹 수정 버튼
        if st.button("그룹 수정"):
            try:
                conn = sqlite3.connect('zip.db')
                cursor = conn.cursor()
                cursor.execute(
                    """
                    UPDATE "group"
                    SET group_name = ?, category = ?, status = ?, meeting_date = ?, meeting_time = ?, modify_date = ?
                    WHERE group_id = ? 
                    """,
                    (
                        group_name,
                        selected_category[0],
                        selected_status,
                        meeting_date.strftime("%Y-%m-%d"),
                        meeting_time.strftime("%H:%M:%S"),
                        group.datetime.now(),
                        group_id,
                    ),
                )
                conn.commit()
                st.success(f"'{group_name}' 그룹이 성공적으로 수정되었습니다!")
            except sqlite3.Error as e:
                st.error(localization.get_text("db_error").format(e))
            finally:
                conn.close()

    except sqlite3.Error as e:
        st.error(localization.get_text("db_error").format(e))
        return
    finally:
        conn.close()

    if st.button("뒤로가기"):
        go_back()






# 페이지 함수 매핑
page_functions = {
    'Home': home_page,
    'Login': login_page,
    'Signup': signup_page,
    'after_login': after_login,
    'Upload Post': upload_post,
    'Change Post': change_post,
    'Delete Post': delete_post,
    'View Post': view_post,
    'Setting': setting_page,
    'User manager': usermanager_page,
    'Group page' : my_groups_page,
    'ID PW 변경': id_pw_change_page,
    'Detail group' : detail_group,
    'GroupBlockList' : group_block_list_page,
    'Group Update Page': group_update_page,  # 그룹 수정 페이지 등록
    'Group Delete Page': group_delete_page,  # 그룹 삭제 페이지 등록
    'Group Request Page': group_request_page,  # Group Request Page 매핑 추가
    'Friend List Page' : FriendList_page,
}

page_functions.update({
    "FriendList": lambda: friend.show_friend_list(st.session_state["user_id"]),
    "AddFriend": lambda: friend.add_friend(
        st.session_state["user_id"],
        st.text_input("추가할 친구 ID", key="add_friend_id")
    ),
    "FriendRequests": lambda: friend.show_friend_requests_page(st.session_state["user_id"]),
    "BlockedList": lambda: friend.show_blocked_list(st.session_state["user_id"]),
    "DeleteFriend": lambda: friend.delete_friend(
        st.session_state["user_id"],
        st.text_input("삭제할 친구 ID", key="delete_friend_id")
    ),
})


# 현재 페이지 렌더링
if st.session_state.current_page in page_functions:
    page_functions[st.session_state.current_page]()  # 매핑된 함수 호출
else:
    st.error("페이지를 찾을 수 없습니다.")  # 잘못된 페이지 처리
